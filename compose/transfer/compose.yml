# Launches a transfer experiment. Use `launch.sh` for starting these
# experiments.
version: "3"

services:
  # This service may throw a benign EOFError at the end of the job.
  elf:
    profiles:
      - elf
    image: ANONYMOUS_USERNAME/ANONYMOUS_REPO:elf
    build:
      context: ${HOST_REPO_ROOT}/engines/elf
    volumes:
      - type: bind
        source: ${HOST_OUTPUT_DIR}
        target: /outputs
    command: >
      sh -c "
        socat TCP4-LISTEN:80,reuseaddr EXEC:'./run-gtp.sh --verbose' \
        2>&1 | tee --append /outputs/victim.log
      "
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
              driver: nvidia
              device_ids: ["${GPU:-0}"]
  leela:
    profiles:
      - leela
    image: ANONYMOUS_USERNAME/ANONYMOUS_REPO:leela
    build:
      context: ${HOST_REPO_ROOT}/engines/leela
    volumes:
      - type: bind
        source: ${HOST_OUTPUT_DIR}
        target: /outputs
      # Leela takes a minute to do OpenCL tuning on its first run and caches the
      # result. Mounting a host file to the cache at
      # `/root/.local/share/leela-zero/leelaz_opencl_tuning` on the container
      # saves the cache across different launches of the container.
      - type: bind
        source: ${HOST_LEELA_TUNING_FILE}
        target: /root/.local/share/leela-zero/leelaz_opencl_tuning
        read_only: ${ARE_SHARED_FILES_READ_ONLY:-false}
    command: >
      sh -c "
        socat TCP4-LISTEN:80,reuseaddr EXEC:'./run-gtp.sh --verbose' \
        2>&1 | tee --append /outputs/victim.log
      "
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
              driver: nvidia
              device_ids: ["${GPU:-0}"]

  baseline-attack:
    profiles:
      - baseline-attack
    image: ANONYMOUS_USERNAME/ANONYMOUS_REPO:cpp
    build:
      context: ${HOST_REPO_ROOT}
      dockerfile: ${HOST_REPO_ROOT}/compose/cpp/Dockerfile
      target: prod
    depends_on:
      - ${VICTIM}
    volumes:
      - type: bind
        source: ${HOST_OUTPUT_DIR}
        target: /outputs
      - type: bind
        source: ${HOST_REPO_ROOT}
        target: /ANONYMOUS_REPO
        read_only: true
    command:
      sh -c "
        printf '#!/bin/bash\nnc ${VICTIM} 80' > /connect-to-victim.sh
        && chmod +x /connect-to-victim.sh
        && python3 -u /ANONYMOUS_REPO/scripts/baseline_attack.py
        --engine ${VICTIM}
        --executable /connect-to-victim.sh
        --komi ${KOMI}
        --log-dir /outputs/sgfs
        --num-games ${NUM_GAMES}
        --verbose
        2>&1 | tee --append /outputs/attack.log
      "

  katago: &katago
    profiles:
      - katago
    image: ANONYMOUS_USERNAME/ANONYMOUS_REPO:cpp
    build:
      context: ${HOST_REPO_ROOT}
      dockerfile: ${HOST_REPO_ROOT}/compose/cpp/Dockerfile
      target: prod
    volumes:
      - type: bind
        source: ${HOST_OUTPUT_DIR}
        target: /outputs
      - type: bind
        source: ${HOST_REPO_ROOT}
        target: ${HOST_REPO_ROOT}
        read_only: true
      # We prefix the target of KATAGO_MODEL and KATAGO_VICTIM_MODEL differently
      # so that Docker doesn't complain about duplicate volumes when
      # KATAGO_MODEL == KATAGO_VICTIM_MODEL
      - type: bind
        source: ${KATAGO_MODEL}
        target: /adversary-model/${KATAGO_MODEL}
        read_only: true
      - type: bind
        source: ${KATAGO_VICTIM_MODEL}
        target: /victim-model/${KATAGO_VICTIM_MODEL}
        read_only: true
    # ELF does not accept suicide moves, so we set multiStoneSuicideLegal=false.
    command: >
      sh -c "
        socat TCP4-LISTEN:80,reuseaddr \
        EXEC:\"/engines/KataGo-custom/cpp/katago gtp \
          -config ${KATAGO_CONFIG} \
          -override-config logSearchInfo=true\,logToStdout=true \
          -model /adversary-model/${KATAGO_MODEL} \
          -victim-model /victim-model/${KATAGO_VICTIM_MODEL} \
          \" \
        2>&1 | tee --append /outputs/katago.log
      "
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
              driver: nvidia
              device_ids: ["${GPU:-0}"]

  katago-raw:
    <<: *katago
    profiles:
      - katago-raw
    command: >
      sh -c "
        socat TCP4-LISTEN:80,reuseaddr \
        EXEC:\"/engines/KataGo-raw/cpp/katago gtp \
          -config ${HOST_REPO_ROOT}/configs/gtp-raw.cfg \
          -override-config logSearchInfo=true\,logToStdout=true \
          -model /victim-model/${KATAGO_VICTIM_MODEL} \
          \" \
        2>&1 | tee --append /outputs/katago-raw.log
      "

  twogtp:
    profiles:
      - katago
    image: ANONYMOUS_USERNAME/ANONYMOUS_REPO:twogtp
    build:
      context: ${HOST_REPO_ROOT}
      dockerfile: ${HOST_REPO_ROOT}/compose/transfer/twogtp/Dockerfile
    depends_on:
      - ${VICTIM}
      - katago
    volumes:
      - type: bind
        source: ${HOST_OUTPUT_DIR}
        target: /outputs
    command:
      sh -c "
        mkdir --parents /outputs/sgfs &&
        bin/gogui-twogtp
          -black 'nc ${VICTIM} 80' -white 'nc katago 80'
          -alternate -auto -games ${NUM_GAMES} -komi ${KOMI} -maxmoves 1600
          -sgffile /outputs/sgfs/game -verbose
        2>&1 | tee --append /outputs/twogtp.log
      "
